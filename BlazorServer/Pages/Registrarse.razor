@page "/Registrarse"
@using ModeloClasesAlumnos
@using BlazorServer.Servicios
@inject NavigationManager navigationManager
@inject IServicioLogin ServicioLogin

<EditForm Model="@usuario" OnValidSubmit="HandleValidSubmit">
    <DataAnnotationsValidator />
    <h3>Nuevo Usuario</h3>
    <hr />
    <ValidationSummary />
    <div class="form-group row">
        <label for="Email" class="col-sm-2 col-form-label">
            Email
        </label>
        <div class="col-sm-10">
            <InputText id="Email" class="form-control" placeholder="Email"
                       @bind-Value="usuario.EmailLogin" />
            <ValidationMessage For="@(() => usuario.EmailLogin)" />
        </div>
    </div>
    <div class="form-group row">
        <label for="Password" class="col-sm-2 col-form-label">
            Password
        </label>
        <div class="col-sm-10">
            <InputText type="password" id="Password" class="form-control" placeholder="Password"
                       @bind-Value="usuario.Password" />
            <ValidationMessage For="@(() => usuario.Password)" />
        </div>
    </div>

    <div class="row content">
        <div class="col-md-1">
            <input type="submit" class="btn btn-primary" value="Guardar" @onclick="Guardar" />
        </div>
        <div class="col-md-2">
            <input type="button" value="Cancelar" class="btn btn-danger" @onclick="Cancelar" />
        </div>
    </div>

</EditForm>

@if (mostrarError)
{
    <div class="modal bg-secondary" tabindex="-1" style="display:block;" role="dialog">
        <div class="modal-dialog modal-confirm">
            <div class="modal-content ">
                <div class="modal-header justify-content-center bg-info">
                    <div>
                        <strong>Se produjo un error al realizar la operación.</strong>
                    </div>
                    <button type="button" class="close"
                    @onclick="CerrarError">
                        <i class="large material-icons">cancel</i>
                    </button>
                </div>
                <div class="modal-body text-center">
                    <h4>Ooops!</h4>
                    <p>@textoError</p>
                    <button class="btn btn-success" @onclick="CerrarError" data-dismiss="modal">Cerrar</button>
                </div>
            </div>
        </div>
    </div>
}


@code {
    UsuarioLogin usuario = new UsuarioLogin();
    public String textoError = String.Empty;
    public Boolean mostrarError = false;

    Login l = new Login();
    UsuarioAPI u = new UsuarioAPI();

    protected override async Task OnInitializedAsync()
    {

        try
        {
            l.Usuario = Environment.GetEnvironmentVariable("UsuarioAPI");
            l.Password = Environment.GetEnvironmentVariable("PassAPI");
            u = (await ServicioLogin.SolicitudLogin(l));
            Environment.SetEnvironmentVariable("Token", u.Token);
        }
        catch (Exception ex)
        {
            textoError = ex.Message;
            MostrarError();
            StateHasChanged();
        }
    }

    protected async Task Guardar()
    {
        try
        {
            //Guardamos el usuario en nuesttra base de datos
            if(usuario.EmailLogin != null && usuario.Password != null)
            {
                usuario = (await ServicioLogin.CrearUsuario(usuario));
                navigationManager.NavigateTo("/IniciarSesion");
            }
        }
        catch (Exception ex)
        {
            textoError = ex.Message;
            MostrarError();
            StateHasChanged();
        }
    }

    public void HandleValidSubmit()
    {
        Console.WriteLine("OnValidSubmit");
    }

    protected void Cancelar()
    {
        navigationManager.NavigateTo("/IniciarSesion");
    }

    protected void CerrarError()
    {
        mostrarError = false;
    }

    protected void MostrarError()
    {
        mostrarError = true;
    }
}
