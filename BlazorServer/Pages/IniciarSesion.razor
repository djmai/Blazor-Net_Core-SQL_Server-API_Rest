@page "/IniciarSesion"
@using BlazorServer.Servicios;
@using ModeloClasesAlumnos
@inject AuthenticationStateProvider AuthenticationStateProvider;
@inject Blazored.SessionStorage.ISessionStorageService almacenarSesion;
@inject NavigationManager navigationManager;
@inject IServicioLogin ServicioLogin;


<EditForm Model="@usuario" OnValidSubmit="HandleValidSubmit">
    <DataAnnotationsValidator />
    <div>
        <h3 style="font-weight:bold; color:purple">Iniciar Sesión</h3>
    </div>
    <div>
        <br />
    </div>
    <div class="col-6 row">
        <InputText class="form-control col-12" @bind-Value="usuario.EmailLogin" placeholder="Email" />
        <ValidationMessage For="@(() => usuario.EmailLogin)" />
    </div>
    <br />
    <div class="col-6 row">
        <InputText type="password" class="form-control col-12" @bind-Value="usuario.Password" placeholder="Password" />
        <ValidationMessage For="@(() => usuario.Password)" />

    </div>
    <br />
    <div class="col-6 row">
        <input type="submit" class="form-control col-12 btn btn-primary" value="Login" @onclick="ValidarUsuario" />
    </div>
    <div>
        <br />
    </div>
    <div class="col-6 row">
        <a href="/Registrarse" class="form-control col-12 btn btn-danger">Registro</a>
    </div>
    <br />
    <div class="col-12 row" style="text-align:left; font-weight:bold">
        <span class="col-12">@LoginMensaje</span>
    </div>
</EditForm>

@if (mostrarError)
{
    <div class="modal bg-secondary" tabindex="-1" style="display:block;" role="dialog">
        <div class="modal-dialog modal-confirm">
            <div class="modal-content ">
                <div class="modal-header justify-content-center bg-info">
                    <div>
                        <strong>Se produjo un error al realizar la operación.</strong>
                    </div>
                    <button type="button" class="close"
                    @onclick="CerrarError">
                        <i class="large material-icons">cancel</i>
                    </button>
                </div>
                <div class="modal-body text-center">
                    <h4>Ooops!</h4>
                    <p>@textoError</p>
                    <button class="btn btn-success" @onclick="CerrarError" data-dismiss="modal">Cerrar</button>
                </div>
            </div>
        </div>
    </div>
}

@code {
    UsuarioLogin usuario = new UsuarioLogin();
    public string LoginMensaje { get; set; }

    public String textoError = String.Empty;
    public Boolean mostrarError = false;

    Login l = new Login();
    UsuarioAPI u = new UsuarioAPI();

    public void HandleValidSubmit()
    {
        Console.WriteLine("OnValidSubmit");
    }

    protected override async Task OnInitializedAsync()
    {

        try
        {
            l.Usuario = Environment.GetEnvironmentVariable("UsuarioAPI");
            l.Password = Environment.GetEnvironmentVariable("PassAPI");
            u = (await ServicioLogin.SolicitudLogin(l));
            Environment.SetEnvironmentVariable("Token", u.Token);
        }
        catch (Exception ex)
        {
            textoError = ex.Message;
            MostrarError();
            StateHasChanged();
        }
    }

    private async void ValidarUsuario()
    {
        try
        {
            if(usuario.EmailLogin != null && usuario.Password != null)
            {
                usuario = await ServicioLogin.ValidarUsuario(usuario);

                ((MiServicioAuthenticationStateProvider)AuthenticationStateProvider).UsuarioAutenticado(usuario.EmailLogin);
                await almacenarSesion.SetItemAsync("email", usuario.EmailLogin);

                navigationManager.NavigateTo("/alumnos");

            }
        }catch(Exception ex)
        {
            textoError = ex.Message;
            MostrarError();
            StateHasChanged();
        }
    }

    protected void CerrarError()
    {
        mostrarError = false;
    }

    protected void MostrarError()
    {
        mostrarError = true;
    }
}
